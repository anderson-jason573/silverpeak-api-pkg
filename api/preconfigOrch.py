"""
**********************************************************

This module uploads preconfiguration files to 
Orchestrator.

**********************************************************
"""

def preconfigUpload(orchIP, loginCookie, name, tag, data):
    import requests

# Surpress ssl certificate verifcation warnings

    requests.packages.urllib3.disable_warnings()

# API call

    url = "https://{0}/gms/rest/gms/appliance/preconfiguration".format(orchIP)
    payload = "{{\r\n  \"name\": \"{0}\",\r\n  \"serialNum\": null,\r\n  \"tag\": \"{1}\",\r\n  \"comment\": null,\r\n  \"autoApply\": true,\r\n  \"configData\": \"{2}\"\r\n}}".format(name, tag, data)
    headers = {'Content-Type': 'application/json'}
    response = requests.request("POST", url, headers=headers, data=payload, cookies=loginCookie, verify=False)

    if response.status_code == 200:
        print(name + ' preconfiguration successfully uploaded to Orchestrator.')
    else:
        sys.exit('Failed to upload ' + name + ' preconfiuration to Orchestrator.')


"""
********************************************************************************
For Testing Only
********************************************************************************
"""

if __name__ == "__main__":

    print('\n ****************************************************************')
    print('\n    This module was ran directly. It is for testing only.')
    print('\n **************************************************************** \n')

    from login import OrchLogin
    orchIP = input("Orchestrator IP Address: ")
    user = input("username: ")
    password = input("password: ")

    loginCookie = OrchLogin(orchIP, user, password)

    name = 'ecv1-test'
    tag = 'ecv1-tag'
    data = ''

    preconfigUpload(orchIP, loginCookie, name, tag, data)

# end
